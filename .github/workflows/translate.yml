name: Translation

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
on:
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #   - '**.en.json' # only take action when *.en.json files change   
  push:
    branches: [ main ]
    paths:
    - '**.en.json' # only take action when *.en.json files change   
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  translate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Machine Translator
        id: translator
        uses: IEvangelist/resource-translator@v2.1.6
        with:
          sourceLocale: en
          subscriptionKey: ${{ secrets.AZURE_TRANSLATOR_SUBSCRIPTION_KEY }}
          endpoint: ${{ secrets.AZURE_TRANSLATOR_ENDPOINT }}
          region: ${{ secrets.AZURE_TRANSLATOR_REGION }}
          toLocales: es,ja,ko,pt

      # Get list of files generated by the translation
      - name: Get changed files
        id: changes
        run: |
          echo "::set-output name=all::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | xargs)"
          echo "::set-output name=json::$(git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep .json$ | xargs)"        
      
      # To correct some JSON changes introduce by the translation
      - name: Transform JSON files
        id: Transform
        if: ${{ steps.translator.outputs.has-new-translations }} == 'true'
        run: |
          $inputFiles = "${{ steps.changes.outputs.json }}"
          ./.github/workflows/transform.ps1 $inputFiles
        shell: pwsh

      # Generate macro-free spreadsheets
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8 #install the python needed
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests openpyxl
      - name: execute python script # run file
        run: |
          python ./scripts/update_excel_openpyxl.py --checklist-file="${{ steps.changes.outputs.json }}" --excel-file="./spreadsheet/review_checklist_empty.xlsx" --output-name-is-input-name --output-path="./spreadsheet/" --verbose
          python ./scripts/update_excel_openpyxl.py --only-english --checklist-file="${{ steps.changes.outputs.json }}" --excel-file="./spreadsheet/review_checklist_empty.xlsx" --output-name-is-input-name --output-path="./spreadsheet/" --verbose

      # Create the PR
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3.10.1
        if: ${{ steps.translator.outputs.has-new-translations }} == 'true'
        with:
          title: '${{ steps.translator.outputs.summary-title }}'
          body: '${{ steps.translator.outputs.summary-details }}'
